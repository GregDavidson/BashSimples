* Managing Environment Paths with Shell Scripts

** Context

Modern operating systems allow users to customize many services using
/Environment Variables/ whose values are /Strings/ which can be interpreted
according to the purpose of the /Environment Variable/. Some of these
/Environment Variables/ are /Path Variables/ whose values consist of a /Sequence
of Elements/ separated by a /Delimiter/. The delimiter is a colon (:) in /Posix
Systems/ which include Unix, Gnu/Linux (and Android) and BSD (including Apple's
MacOS and iOS). Microsoft DOS and Windows have a similar concept although they
use a semi-colon (;) as a delimiter.

The original /Path Variable/ is =PATH= whose elements consist of directories
containing executable programs. When a /Command Interpreter/ (aka /Shell/) is
given the name of a program without a directory path, it searches for the
appropriate program by looping along the =PATH= directories and takes the first
one it finds. Thus, the order of directories in the =PATH= value matters!

** Examples of /Path Variables/

Some PATH variables in Gnu/Linux
#+begin_src sh :results output
env | grep '^[^=]*PATH.*=' | cut -d= -f1
#+end_src

#+RESULTS:
#+begin_example
GUIX_LOCPATH
COWPATH
GTK_PATH
GUILE_LOAD_COMPILED_PATH
XDG_SEAT_PATH
INFOPATH
MANDATORY_PATH
DEFAULTS_PATH
PATH
EMACS_LOAD_PATH
XDG_SESSION_PATH
INFO_LOAD_PATH
EMACSLOADPATH
GUILE_LOAD_PATH
#+end_example

The original PATH variable, providing lookup for executables, can be quite long:
#+begin_src sh :results output
echo $PATH | fold
#+end_src

#+RESULTS:
#+begin_example
/home/greg/Projects/Wicci/Tools/Bin:/home/greg/Bin:/home/greg/Shared/Bin:/usr/bi
n/mh:/home/greg/.cargo/bin:/home/greg/SW/X/bin:/home/greg/SW/words/bin:/home/gre
g/SW/Wicci/Bin:/home/greg/SW/uwm/bin:/home/greg/SW/uucp/bin:/home/greg/SW/unix/b
in:/home/greg/SW/tex/bin:/home/greg/SW/sys/bin:/home/greg/SW/startup/bin:/home/g
reg/SW/shar/bin:/home/greg/SW/selp/bin:/home/greg/SW/rsync/bin:/home/greg/SW/oob
r/bin:/home/greg/SW/ng/bin:/home/greg/SW/misc/bin:/home/greg/SW/mh/bin:/home/gre
g/SW/mail/bin:/home/greg/SW/lj3/bin:/home/greg/SW/links/bin:/home/greg/SW/killin
g/bin:/home/greg/SW/image/bin:/home/greg/SW/ics/bin:/home/greg/SW/html/bin:/home
/greg/SW/git/bin:/home/greg/SW/emacs/bin:/home/greg/SW/dir2dir/bin:/usr/local/SW
/pgsql/bin:/usr/local/SW/julia/bin:/usr/local/SW/j/bin:/home/greg/Bin.guix:/home
/greg/.guix-profile/bin:/home/greg/.config/guix/current/bin:/usr/local/sbin:/usr
/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/
gnu/store/0c1yfbxyv877mlgychfgvmk5ha2jqh52-gzip-1.10/bin:/gnu/store/8fpk2cja3f07
xls48jfnpgrzrljpqivr-coreutils-8.32/bin
#+end_example

Or more readably:
#+begin_src sh :results output
echo $PATH | tr : '\n' | sed 's|^/home/greg/|~/|' | cat -n
#+end_src

#+RESULTS:
#+begin_example
     1	~/Projects/Wicci/Tools/Bin
     2	~/Bin
     3	~/Shared/Bin
     4	/usr/bin/mh
     5	~/.cargo/bin
     6	~/SW/X/bin
     7	~/SW/words/bin
     8	~/SW/Wicci/Bin
     9	~/SW/uwm/bin
    10	~/SW/uucp/bin
    11	~/SW/unix/bin
    12	~/SW/tex/bin
    13	~/SW/sys/bin
    14	~/SW/startup/bin
    15	~/SW/shar/bin
    16	~/SW/selp/bin
    17	~/SW/rsync/bin
    18	~/SW/oobr/bin
    19	~/SW/ng/bin
    20	~/SW/misc/bin
    21	~/SW/mh/bin
    22	~/SW/mail/bin
    23	~/SW/lj3/bin
    24	~/SW/links/bin
    25	~/SW/killing/bin
    26	~/SW/image/bin
    27	~/SW/ics/bin
    28	~/SW/html/bin
    29	~/SW/git/bin
    30	~/SW/emacs/bin
    31	~/SW/dir2dir/bin
    32	/usr/local/SW/pgsql/bin
    33	/usr/local/SW/julia/bin
    34	/usr/local/SW/j/bin
    35	~/Bin.guix
    36	~/.guix-profile/bin
    37	~/.config/guix/current/bin
    38	/usr/local/sbin
    39	/usr/local/bin
    40	/usr/sbin
    41	/usr/bin
    42	/sbin
    43	/bin
    44	/usr/games
    45	/usr/local/games
    46	/snap/bin
    47	/gnu/store/0c1yfbxyv877mlgychfgvmk5ha2jqh52-gzip-1.10/bin
    48	/gnu/store/8fpk2cja3f07xls48jfnpgrzrljpqivr-coreutils-8.32/bin
#+end_example

** Augmenting a /Path Variable/

The usual method for adding a new directory to =PATH= is
#+begin_src sh
  # Add ~/bin to the beginning of my PATH
  PATH="~/bin:$PATH"
  # Add /usr/games to the end of my PATH
  PATH="$PATH:/usr/games"
#+end_src
- Infelicity :: If the element you want to add is already on the path, it will
  be added again. If you're frequently /Sourcing/ a script with this code in it,
  the path can get cluttered with redundant elements.

An improved method for adding a new directory to =PATH= 
#+begin_src sh
  # Add elements to the beginning of my PATH
  for d in ~/[Bb]in ~/Shared/Bin in
    case ":$PATH:" in
         *":$d:"*) ;;
         *) PATH="$d:$PATH" ;;
    esac
#+end_src

This is starting to get complicated, suggesting that it might better be packaged
in a shell function, along with dealing with adding to the front or the back of
the path, and whether the component exists (helpful to detect mistakes).

#+begin_src sh :results output
path_augment() {
  local path d end='true' path0="$1" pgm='path_augment'
  help='Add elements to a colon-delmited PATH'
  usage='OLD_PATH [-b|-e|NEW_ELEMENT]...'
  case $# in
      0) >&2 printf "$pgm %s\n\t%s\n" "$usage" "$help"
          return 1 ;;
  esac
  path="$1" ; shift
  case "$path" in
      -*) >&2 printf 'illegal path %s\n' "$d"
          printf "\n"; return 2 ;;
  esac
  for d; do
      case "$d" in
          -b) end='false' ;;    # add elements to beginning
          -e) end='true'  ;;    # add elements to end
          -*) >&2 printf 'no flag %s\n' "$d"
              printf '%s\n' "$path0"; return 3 ;;
          *) case ":$PATH:" in
                  *":$d:"*) ;;  # element already present
                  *) [ -d "$d" ] || {
                          >&2 printf 'no directory %s' "$d"
                          printf "%s\n" "$path0"; return 4
                     }
                     if $end
                     then path="$path:$d"
                     else path="$d:$path"
                     fi ;;
             esac
      esac
  done
  echo "$path"
}
# tests
path_augment 2>&1
path_augment -h 2>&1
path_augment "$PATH" -b /does-not-exist | tr : '\n' | head -1
path_augment "$PATH" -b /tmp | tr : '\n' | head -1
path_augment "$PATH" -e /tmp | tr : '\n' | tail -1
#+end_src

The shell function can then be used like this
#+begin_src 
  PATH=`path_augment "$PATH" -b ~/[Bb]in /usr/local/bin -e /usr/games`
#+end_src

Notes
- =path_augment= has no side effects
- =path_augment= can work with any path variable taking directories
Infelicities
- =path_augment= can only add directory elements
- Order of =-b= elements is reversed from argument order

How can this function be improved?

** Path Trees in Resource Forks

The /Posix/ conventions for organizing /System Files/ in the
/Filesystem/ are documented in =hier(7)= in the /Programers' Manual/.
Run =man hier= if you have the =man= command and manual pages installed.

Most resources for users can be found under the
- Root Partition / :: essential resources for administration
- User Partition /usr :: additional resources for users
- Local Partition /usr/local :: non-standard resources added by administrators
- User's Home Directory /home/USERNAME :: the user must administrate this!

The /Posix/ convention for installing /Packages/ is to split up their files and
store them in different places in the /Filesystem/ along with similiar kinds of
files from other packages. (This seemed reasonable in the 1970s!)

- Binary programs and scripts go in =/bin=, =/usr/bin=, =/local/bin=, etc.
- Libraries in =/lib=, =/usr/lib=, =/local/lib=, etc.
- Sharable resources, e.g. documentation in =/usr/share=, =/usr/local/share=, etc.
      - There is no =/share=!

On some systems additional such trees are created
- Third Party Packages under =/opt=
- Or others!

On the Macintosh Operating System, Apple has elected to keep many packages intact,
so there will be a resource tree for major programs, e.g.
#+begin_example
PostgreSQL-14.1/
    bin/
    data/
    include/
    lib/
    share/
#+end_example

I have adopted a similar approach which predates Apple's convention.

Under my /Home Directory/ I store my scripts and programs like this
- ~/Bin :: miscellaneous standalone script files
- ~/SW/*/* :: related programs and scripts needing other resources
      - Over time I've accumulated 30 such groups, e.g.
#+begin_example
~/SW/emacs -- my emacs-related resources with subdirectories
      - bin -- my shell scripts which automate emacs
      - doc -- my documentation for my emacs projects
      - lisp -- my lisp code which extends emacs
-/SW/ics -- resources related to an old employer with subdirectories
      - bin -- scripts
      - bin.sun3 -- programs compiled for the sun3 architecture
      - src -- source code for the compiled programs
      - etc -- resources for the scripts and programs
#+end_example

As an administrator, I organize =/usr/local= similarly, except that I allow for multiple versions
of packages and subsystems to be installed concurrently:
- /usr/local/bin -- miscellaneous stand-alone scripts and programs
- /usr/local/SW.d -- packages and subsystems with a version string
- /usr/local/SW -- unversioned packages, or links to specific versions

#+begin_src sh :results output
  tree /usr/local/SW/
#+end_src

#+RESULTS:
: /usr/local/SW/
: ├── j -> ../SW.d/j901
: ├── julia -> ../SW.d/julia-1.5.3
: └── pgsql -> ../SW.d/pgsql-14.1
: 
: 3 directories, 0 files

#+begin_src sh :results output
  tree -d -L 2 /usr/local/SW.d/
#+end_src

#+RESULTS:
#+begin_example
/usr/local/SW.d/
├── j901
│   ├── addons
│   ├── bin
│   ├── system
│   ├── tools
│   └── user
├── julia-1.5.3
│   ├── bin
│   ├── etc
│   ├── include
│   ├── lib
│   ├── libexec
│   └── share
├── pgsql-13.1
│   ├── bin
│   ├── data
│   ├── include
│   ├── lib
│   └── share
├── pgsql-14.1
│   ├── bin
│   ├── data
│   ├── include
│   ├── lib
│   └── share
└── pgsql-14rc1
    ├── bin
    ├── data
    ├── include
    ├── lib
    └── share

31 directories
#+end_example
