#!/usr/bin/bash

# ** Who we are, where's our stuff, what're our destinations?

set -u                               # unknown parameter expansions are errors
pgm_name="${0##*/}"                  # name of this script

home="${home:-$HOME}"                # usual location of profile scripts
bash_lib="$home/Lib/Shell"           # location of bash profiles
simples_lib="$bash_lib/Simples-Bash" # location of bash simples scripts
xprofile="$home/.xprofile"
save="$home/.save-dots"

profile_names=(.profile .bash_profile .bashrc)
profile_purposes=(
    'main login-time sh script'
    'main login-time bash script'
    'main startup-time script for interactive bash shells'
)
profile_dir_purposes=(
    'login-time scripts only requiring sh features'
    'login-time scripts requiring bash features'
    'startup-time scripts for interactive bash shells'
)

profiles=()
profile_dirs=()
for i in ${!profile_names[@]}; do
    profiles+=("$home/${profile_names[$i]}")
    profile_dirs+=("$home/${profile_names[$i]}.d")
done

# ** Communication and Exits

pgm_msg() {
    level="$1"; shift
    >&2 printf "%s%s: %s\n" "$pgm_name" "$level" "$*"
}
pgm_warn() { pgm_msg ' warning' "$*!"; }
pgm_exit() {
    local code="$1"; level="$2"; shift 2
    pgm_msg "$level" "$@!"
    exit "$code"
}
pgm_error() {
    local code="$1"; shift
    pgm_exit "$code" ' error' "$@"
}

# ** Check what we can regardless of our specific goals

(( BASH_VERSINFO[0] >= 5 )) ||
    pgm_error 1 'Please upgrade Bash to version 5 or better'

for d in "$bash_lib" "$simples_lib"; do
    [ -d "$d" ] ||
        pgm_error 2 "No directory $d - maybe run install-library script?"
done

for d in "$simples_lib"; do
    for f in "simples.bash"; do
        [ -f "$d/$f" ] || pgm_error 3 "No file $f"
    done
done

for d in "$bash_lib"; do
    for f in "${profiles[@]}" ; do
        [ -f "$d/$f" ] || pgm_error 4 "No file $f"
    done
done

# ** Get informed consent

cat <<EOF
If you accept, this script will
- Move existing customized profiles to $save
- Replace them with links to the ones in $bash_lib
- Ensure you have directories for your extension scripts
EOF
echo 'Profiles:'
for i in ${!profile_names[@]}; do
    printf '%s -- %s\n' "${profile_names[$i]}" "${profile_purposes[$i]}"
done
echo 'Extension Script Directories:'
for i in ${!profile_names[@]}; do
    printf '%s.d -- %s\n' "${profile_names[$i]}" "${profile_dir_purposes[$i]}"
done
printf "%s [yn] " "Shall we proceed?"

read answer junk
[[ "X$answer" == X[Yy]* ]] || pgm_exit 5 '' 'Your answer was not y. Goodbye'

# ** Safely install the new scripts

saved=( )
for f in "${profiles[@]}" ; do
    [ -L "$f" ] && rm "$f"
    [ -f "$f" ] && cmp -s "$f" "$bash_lib/$f" && {
            pgm_msg "$f is already the same as $bash_lib/$f"
            continue
        }
    [ -e "$f" ] && {
        mkdir -p "$save" || pgm_error 6 "Can't make directory $save"
        mv --backup=numbered "$f" "$save" && saved+=("$f") ||
                pgm_error 7 "Can't save $f to directory $save"
    }
    ln -s "$bash_lib/$f" "$f" ||
        pgm_warn "linking $bash_lib/$f to $f failed"
done

(( ${#saved[@]} > 0 )) && {
    pgm_msg '' "${#saved[@]} file(s) were moved to $save:"
    for f in "${saved[@]}"; do
        printf "\t%s\n" "$f"
    done
}

# ** Ensure the other bits are set up

# Ensure .xprofile is a link to .profile
for x in "$xprofile"; do
    if [ -L "$x" ]; then
        rm "$x"; } || pgm_warn "removing $x link failed"
    elif [ -e "$x" ]; then
        pgm_msg '' "You may need to update your $x"
    else
        ln -s "$profile" "$x" || pgm_warn "linking $x failed"
    fi
done

# Ensure these lovely directories exist
for d in "${profile_dirs[@]}" ; do
    mkdir -p "$d"
done

# For additional quality we could create a temporary save directory
# for this run of the script and restore anything from there if its
# replacement were to fail.  At the end, we could merge it in to the
# regular save directory and rmdir it.
